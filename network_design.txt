The input layout will be as follows:

		* O (Nought) -->   0
		* _ (Empty)  --> 0.5
		* X (Cross)  -->   1

The input will obviously be entered in the following form:

e.g. [0.5, 0, 1, 1, 1, 0, 0, 0.5, 0.5]

The output should correspond to the actual layout of the board that Nethan believes works best for him. See the example below:

E.g:

IN:
[ O ] [   ] [   ]
[ X ] [ X ] [   ]     ---> [0, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5]
[   ] [   ] [   ]

OUT:
[ O ] [   ] [   ]
[ X ] [ X ] [ O ]     ---> [0, 0.5, 0.5, 1, 1, 0, 0.5, 0.5, 0.5]
[   ] [   ] [   ]

IN:
[   ] [ O ] [ X ]
[   ] [ X ] [   ]     ---> [0.5, 0, 1, 0.5, 1, 0.5, 0.5, 0.5, 0.5]
[   ] [   ] [   ]

OUT:
[   ] [ O ] [ X ]
[   ] [ X ] [   ]     ---> [0.5, 0, 1, 0.5, 1, 0.5, 0, 0.5, 0.5]
[ O ] [   ] [   ]

IN:
[ X ] [   ] [ X ]
[   ] [ O ] [   ]     ---> [1, 0.5, 1, 0.5, 0, 0.5, 0.5, 0.5, 0.5]
[   ] [   ] [   ]

OUT:
[ X ] [ O ] [ X ]
[   ] [ O ] [   ]     ---> [1, 0, 1, 0.5, 0, 0.5, 0.5, 0.5, 0.5]
[   ] [   ] [   ]

IN:
[   ] [   ] [   ]
[   ] [ O ] [   ]     ---> [0.5, 0.5, 0.5, 0.5, 0, 0.5, 1, 0.5, 1]
[ X ] [   ] [ X ]

OUT:
[   ] [   ] [   ]
[   ] [ O ] [   ]     ---> [0.5, 0.5, 0.5, 0.5, 0, 0.5, 1, 0, 1]
[ X ] [ O ] [ X ]




Because my values are within the range of 0 to 1, I can use the sigmoid function, round the numbers to the nearest half, and then return the array of values. This means it can output the actual values of the cells rather than having to convert to them in some way or another.







