//play.js

//opening message
function welcome() {
	console.log("Welcome. Moves are entered with a single number between 1 to 9.");
	console.log("Please enter 'X' or 'O' to indicate which player you are.");
}

//set up

var Nethan = require("./nethan");
var nethan_description = "./nethan.json";
var nethan = new Nethan(nethan_description);

var BOARD_LENGTH = 9;
var cells = [BOARD_LENGTH];

var setting_up = true;
var x_to_play = true;
var game_over = false;

var number_of_moves = 0;
var MAX_NUMBER_MOVES = 9;

function empty() {
	this.cell = "[   ]";
}

function x() {
	this.cell = "[ X ]";
}

function o() {
	this.cell = "[ O ]";
}

function init_board() {
	for(var i = 0; i < BOARD_LENGTH; i++)
		cells[i] = new empty();
}

//checking for victory

function check_for_victory(is_human) {
	if(victory_in_row() || victory_in_col() || victory_in_diag()) {
		if(is_human)
			console.log("You win!");
		else
			console.log("Nethan wins!");
		process.exit(0);
	}
}

function victory_in_row() {
	for(var row = 0; row < BOARD_LENGTH; row += 3) {
		var x_victory = true, o_victory = true;
		for(var col = 0; col < BOARD_LENGTH / 3; col++) {
			var cell = cells[row + col];
			if(cell instanceof x)
				o_victory = false;
			else if(cell instanceof o)
				x_victory = false;
			else
				x_victory = o_victory = false;
		}
		if(x_victory || o_victory)
			return true;
	}
	return false;
}

function victory_in_col() {
	for(var row = 0; row < BOARD_LENGTH / 3; row++) {
		var x_victory = true, o_victory = true;
		for(var col = 0; col < BOARD_LENGTH; col += 3) {
			var cell = cells[row + col];
			if(cell instanceof x)
				o_victory = false;
			else if(cell instanceof o)
				x_victory = false;
			else
				x_victory = o_victory = false;
		}
		if(x_victory || o_victory)
			return true;
	}
	return false;
}

function victory_in_diag() {
	if(cells[0].cell === cells[4].cell && cells[4].cell === cells[8].cell && !(cells[0] instanceof empty)) //first diag (1, 5, 9)
		return true;
	else if(cells[2].cell === cells[4].cell && cells[4].cell === cells[6].cell && !(cells[2] instanceof empty)) //second diag (3, 5, 7)
		return true;
	else
		return false;
}

//validation

function not_empty_at(input) {
	return !(cells[input - 1] instanceof empty);
}

function valid_input(input) {
	if(not_empty_at(input))
		return false;
	else
		return true;
}

//modification

function update_board(input) {
	if(x_to_play)
		cells[input - 1] = new x();
	else
		cells[input - 1] = new o();
}

//io

var stdin = process.stdin;

var input = "";
var symbol_expression = /^[XO]$/;
var move_expression = /^[1-9]$/;

function select_symbol(input) {
	if(!symbol_expression.test(input)) {
		console.log("Please choose to play either 'X' or 'O'.\n");
		process.exit(0);
	}
	if(input == "X")
		x_to_play = true;
	else
		x_to_play = false;

	nethan.set_symbol(!x_to_play);
	setting_up = false;
	console.log("Now enter your first move.");
}

function add_players() {
	welcome();
	stdin.addListener("data", callback);
}

function callback(d) {
	input = d.toString().trim();

	if(setting_up)
		select_symbol(input);

	var message = "";

	if(!move_expression.test(input)) {
		message = "Please enter a number between 1 and 9, and press enter.\n";
		print_board(message);
		return;
	}

	input = input.replace(/ /g, "");

	if(valid_input(input)) {
		update_board(input);
		number_of_moves++;
		print_board(message);
		check_for_victory(true);
		if(number_of_moves == MAX_NUMBER_MOVES) {
			console.log("It's a draw!");
			process.exit();
		}
	}
	else
		message = "Invalid move. Please try again.\n";

	cells = convert_from(nethan.makeMove(cells));
	number_of_moves++;
	print_board(message);
	check_for_victory(false);
}

function convert_from(nethan_response) {
	for(var i = 0; i < BOARD_LENGTH; i++) {
		if(nethan_response[i] >= 0.33333 && nethan_response[i] <= 0.66666)
			cells[i] = new empty();
		else if(x_to_play) {
			if(nethan_response[i] < 0.33333)
				cells[i] = new o();
			else
				cells[i] = new x();
		}
		else
			if(nethan_response[i] < 0.33333)
				cells[i] = new x();
			else
				cells[i] = new o();
	}
	return cells;
}

function print_board(message) {
	var line = "";
	for(var i = 0; i < BOARD_LENGTH; i++) {
		line += cells[i].cell + " ";
		if((i + 1) % 3 == 0) {
			console.log(line);
			console.log();
			line = "";
		}
	}

	if(message == undefined)
		message = "";
	if(!setting_up)
		console.log(message);
}

//logic
init_board();
print_board();
add_players();
