//play.js

//opening message
function welcome() {
	console.log("Welcome. Moves are entered with a single number between 1 to 9.");
	console.log("When done, press enter. You will play Crosses (the 'X' character), to go first.");
}

//set up

var Nethan = require("./nethan");
//var nethan = new Nethan();

var BOARD_LENGTH = 9;
var cells = [BOARD_LENGTH];

var x_to_play = true;
var game_over = false;

var number_of_moves = 0;
var MAX_NUMBER_MOVES = 9;

function empty() {
	this.cell = "[   ]";
}

function x() {
	this.cell = "[ X ]";
}

function o() {
	this.cell = "[ O ]";
}

function init_board() {
	for(var i = 0; i < BOARD_LENGTH; i++)
		cells[i] = new empty();
}

//validation

function not_empty_at(input) {
	return !(cells[input - 1] instanceof empty);
}

function valid_input(input) {
	if(not_empty_at(input))
		return false;
	else
		return true;
}

//modification

function update_board(input) {
	if(x_to_play)
		cells[input - 1] = new x();
	else
		cells[input - 1] = new o();
}

//io

var stdin = process.stdin;

var input = "";
var expression = /^[1-9]$/;

function addPlayers() {
	welcome();
	stdin.addListener("data", callback);
}

function callback(d) {
	var message = "";

	input = d.toString().trim();
	if(!expression.test(input)) {
		message = "Please enter a number between 1 and 9, and press enter.\n";
		print_board(message);
		return;
	}

	input = input.replace(/ /g, "");

	if(valid_input(input)) {
		update_board(input);
		x_to_play = !(x_to_play);
		number_of_moves++;
	}
	else
		message = "Invalid move. Please try again.\n";

	//nethan.makeMove(cells);
	print_board(message);
	if(number_of_moves == MAX_NUMBER_MOVES) 
			process.exit();
}

function print_board(message) {
	console.log('\033c');

	var line = "";
	for(var i = 0; i < BOARD_LENGTH; i++) {
		line += cells[i].cell + " ";
		if((i + 1) % 3 == 0) {
			console.log(line);
			console.log();
			line = "";
		}
	}

	if(message == undefined)
		message = "";
	x_to_play ? message += "Crosses to play." : message += "Nethan to play";
	console.log(message);
}

//logic
init_board();
print_board();
addPlayers();
